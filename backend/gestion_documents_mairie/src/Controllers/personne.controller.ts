// import : on va chercher ce qu‚Äôon a besoin pour faire marcher notre code
import { Request, Response } from 'express';

// personneService : c‚Äôest un copain qui fait tout le travail compliqu√© (comme cr√©er une personne, la chercher, etc.)
import personneService from '../Services/personne.service';

// Cr√©er une nouvelle personne
export const createPersonne = async (req: Request, res: Response): Promise<void> => {
  try {
    const personne = await personneService.createPersonne(req.body);
    res.status(201).json(personne); // 201 = cr√©ation r√©ussie
  } catch (error: any) {
    console.log("Erreur lors de la cr√©ation de la personne :", error);
    
    res.status(400).json({ error: error.message }); // 400 = mauvaise requ√™te
  }
};

// R√©cup√©rer toutes les personnes
export const getAllPersonnes = async (req: Request, res: Response): Promise<void> => {
  try {
    const personnes = await personneService.getAllPersonnes();
    res.status(200).json(personnes);
  } catch (error: any) {
    res.status(500).json({ error: error.message }); // 500 = erreur du serveur
  }
};

// R√©cup√©rer une personne par son ID
export const getPersonneById = async (req: Request, res: Response): Promise<void> => {
  try {
    const id = parseInt(req.params.id, 10);
    const personne = await personneService.getPersonneById(id);

    if (!personne) {
      res.status(404).json({ error: 'Personne non trouv√©e' });
    } else {
      res.status(200).json(personne);
    }
  } catch (error: any) {
    res.status(500).json({ error: error.message });
  }
};

// Mettre √† jour une personne
export const updatePersonne = async (req: Request, res: Response): Promise<void> => {
  try {
    const id = parseInt(req.params.id, 10);
    const updatedPersonne = await personneService.updatePersonne(id, req.body);
    res.status(200).json(updatedPersonne);
  } catch (error: any) {
    res.status(400).json({ error: error.message });
  }
};

// Supprimer une personne
export const deletePersonne = async (req: Request, res: Response): Promise<void> => {
  try {
    const id = parseInt(req.params.id, 10);
    await personneService.deletePersonne(id);
    res.status(204).send(); // 204 = supprim√© avec succ√®s, mais rien √† renvoyer
  } catch (error: any) {
    res.status(500).json({ error: error.message });
  }
};

// Chercher une personne √† partir de son userId
export const getPersonneByUserId = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = parseInt(req.params.userId, 10);
    const personne = await personneService.getPersonneByUserId(userId);

    if (!personne) {
      res.status(404).json({ error: 'Personne non trouv√©e pour cet utilisateur' });
    } else {
      res.status(200).json(personne);
    }
  } catch (error: any) {
    res.status(500).json({ error: error.message });
  }
};

// üîí Archiver une personne (au lieu de la supprimer d√©finitivement)
export const archiverPersonne = async (req: Request, res: Response): Promise<void> => {
  try {
    const id = parseInt(req.params.id, 10); // ID de la personne
    const userId = parseInt(req.body.userId); // ID de l'utilisateur qui archive (√† envoyer dans le body)

    const personne = await personneService.archiverPersonne(id, userId);
    res.status(200).json(personne); // On renvoie la personne archiv√©e
  } catch (error: any) {
    res.status(400).json({ error: error.message });
  }
};

// ‚ôªÔ∏è Restaurer une personne archiv√©e
export const restaurerPersonne = async (req: Request, res: Response): Promise<void> => {
  try {
    const id = parseInt(req.params.id, 10);
    const userId = parseInt(req.body.userId); // Celui qui restaure

    const personne = await personneService.restaurerPersonne(id, userId);
    res.status(200).json(personne); // On renvoie la personne restaur√©e
  } catch (error: any) {
    res.status(400).json({ error: error.message });
  }
};

// üì¶ Obtenir la liste des personnes archiv√©es
export const getPersonnesArchivees = async (req: Request, res: Response): Promise<void> => {
  try {
    const personnes = await personneService.getPersonnesArchivees();
    res.status(200).json(personnes); // On renvoie la liste des archiv√©es
  } catch (error: any) {
    res.status(500).json({ error: error.message });
  }
};
